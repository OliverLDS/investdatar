AGENT_ZELINA_PATH <- "~/Documents/2025/_2025-06-17_Zelina"
agent <- suppressMessages(agentr::load_agent(sprintf("%s/data_collector_agent.rds", AGENT_ZELINA_PATH)))
agent$update_metadata_fred()
agent$update_metadata_fred()
str(agent$data_collector)
agent$sync_all_data_fred()
agent$sync_all_data_fred_timely()
str(agent$data_collector)
AGENT_ZELINA_PATH <- "~/Documents/2025/_2025-06-17_Zelina"
agent <- suppressMessages(agentr::load_agent(sprintf("%s/data_collector_agent.rds", AGENT_ZELINA_PATH)))
agent$update_metadata_fred()
str(agent$data_collector)
agent$sync_all_data_fred_timely()
AGENT_ZELINA_PATH <- "~/Documents/2025/_2025-06-17_Zelina"
agent <- suppressMessages(agentr::load_agent(sprintf("%s/data_collector_agent.rds", AGENT_ZELINA_PATH)))
agent$sync_all_data_fred_timely()
AGENT_ZELINA_PATH <- "~/Documents/2025/_2025-06-17_Zelina"
agent <- suppressMessages(agentr::load_agent(sprintf("%s/data_collector_agent.rds", AGENT_ZELINA_PATH)))
agent$sync_all_data_fred_timely()
Sys.getenv("FRED_API_KEY")
AGENT_ZELINA_PATH <- "~/Documents/2025/_2025-06-17_Zelina"
agent <- suppressMessages(agentr::load_agent(sprintf("%s/data_collector_agent.rds", AGENT_ZELINA_PATH)))
agent$sync_all_data_fred_timely()
agent$update_metadata_fred()
str(agent$data_collector)
agent$sync_all_data_okx_candle_timely()
agent$sync_all_data_okx_candle_timely
AGENT_ZELINA_PATH <- "~/Documents/2025/_2025-06-17_Zelina"
agent <- suppressMessages(agentr::load_agent(sprintf("%s/data_collector_agent.rds", AGENT_ZELINA_PATH)))
str(agent$data_collector)
agent$data_collector$fred
agent$update_metadata_fred()
agent$sync_all_data_fred_timely()
agent$sync_all_data_okx_candle_timely()
str(agent$data_collector)
suppressMessages(agentr::save_agent(agent, sprintf("%s/data_collector_agent.rds", AGENT_ZELINA_PATH)))
AGENT_ZELINA_PATH <- "~/Documents/2025/_2025-06-17_Zelina"
agent <- suppressMessages(agentr::load_agent(sprintf("%s/data_collector_agent.rds", AGENT_ZELINA_PATH)))
str(agent$data_collector)
agent$get_logs()
Sys.getenv("OKX_API_KEY2")
config_2 <- list(
api_key = Sys.getenv("OKX_API_KEY2"),
secret_key = Sys.getenv("OKX_SECRET_KEY2"),
passphrase = Sys.getenv("OKX_PASSPHRASE2")
)
okxr::get_account_positions(config = config_2)
okxr::get_account_positions_history(config = config_2)
okxr::get_trade_orders_history_7d(config = config_2, tz = 'Asia/Hong_Kong')
agent$get_local_data_fred('FEDFUNDS')
max(agent$get_local_data_fred('FEDFUNDS')$date)
AGENT_ZELINA_PATH <- "~/Documents/2025/_2025-06-17_Zelina"
agent <- suppressMessages(agentr::load_agent(sprintf("%s/data_collector_agent.rds", AGENT_ZELINA_PATH)))
agent$fill_local_utime_fred()
AGENT_ZELINA_PATH <- "~/Documents/2025/_2025-06-17_Zelina"
agent <- suppressMessages(agentr::load_agent(sprintf("%s/data_collector_agent.rds", AGENT_ZELINA_PATH)))
agent$fill_local_utime_fred()
AGENT_ZELINA_PATH <- "~/Documents/2025/_2025-06-17_Zelina"
agent <- suppressMessages(agentr::load_agent(sprintf("%s/data_collector_agent.rds", AGENT_ZELINA_PATH)))
agent$fill_local_utime_fred()
AGENT_ZELINA_PATH <- "~/Documents/2025/_2025-06-17_Zelina"
agent <- suppressMessages(agentr::load_agent(sprintf("%s/data_collector_agent.rds", AGENT_ZELINA_PATH)))
agent$fill_local_utime_fred()
str(agent$data_collector)
agent$get_local_data_fred('USEPUINDXD')
tail(agent$get_local_data_fred('USEPUINDXD'), 100)
tail(agent$get_local_data_fred('ICSA'), 100)
tail(agent$get_local_data_fred('FEDFUNDS'), 100)
tail(agent$get_local_data_fred('T10Y2Y'), 100)
tail(agent$get_local_data_fred('T10Y2Y'), 500)
tail(agent$get_local_data_fred('T10Y2Y'), 300)
tail(agent$get_local_data_fred('T10Y2Y'), 200)
suppressMessages(agentr::save_agent(agent, sprintf("%s/data_collector_agent.rds", AGENT_ZELINA_PATH)))
agent$get_logs()
DT <- setDT(agent$get_local_data_okx_candle('ETH-USDT-SWAP', '4H'))
DT <- data.table::setDT(agent$get_local_data_okx_candle('ETH-USDT-SWAP', '4H'))
data.table::setorder(DT, timestamp)
# return from get_local_data_okx_candle is not sorted by time
strategyr::gen_ind_EMA(DT)
devtools::load_all("~/Documents/2025/_2025-07-13_strategyr/strategyr")
DT <- data.table::setDT(agent$get_local_data_okx_candle('ETH-USDT-SWAP', '4H'))
data.table::setorder(DT, timestamp)
# return from get_local_data_okx_candle is not sorted by time
strategyr::gen_ind_EMA(DT)
strategyr::gen_ind_ATR(DT)
strategyr::gen_ind_previous_high_low(DT)
strategyr::gen_ind_ATR_ma(DT)
strategyr::gen_ind_EMA_trend(DT)
strategyr::gen_ind_BBands(DT)
strategyr::gen_ind_RSI(DT)
tail(DT, 1)
tail(DT, 1)$max_12
tail(DT, 1)$high_max_50
fib_levels <- function(high, low,
levels = c(0, 0.236, 0.382, 0.5, 0.618,
0.786, 1.0, 1.272, 1.618, 2.0)) {
if (!is.numeric(high) || !is.numeric(low)) {
stop("Both 'high' and 'low' must be numeric.")
}
diff <- high - low
if (diff == 0) stop("High and low cannot be equal.")
if (high > low) {
# Uptrend: retracements are below high
prices <- high - diff * levels
} else {
# Downtrend: retracements are above low
prices <- low + abs(diff) * levels
}
names(prices) <- paste0(round(levels * 100, 1), "%")
return(prices)
}
fib_levels(tail(DT, 1)$high_max_50, tail(DT, 1)$low_max_50)
fib_levels(high= tail(DT, 1)$high_max_50, low = tail(DT, 1)$low_max_50)
DT$high_max_50
tail(DT$high_max_50, 1)
fib_levels(tail(DT$high_max_50, 1), tail(DT$low_max_50, 1))
str(tail(DT$high_max_50, 1))
is.numeric(tail(DT$high_max_50, 1))
is.numeric(tail(DT$low_max_50, 1))
tail(DT$low_max_50, 1)
fib_levels(tail(DT$high_max_50, 1), tail(DT$low_min_50, 1))
fib_levels(tail(DT$high_max_12, 1), tail(DT$low_min_12, 1))
library(httr2)
library(digest)
api_key <- Sys.getenv("BINX_API_KEY")
secret_key <- Sys.getenv("BINX_SECRET_KEY")
base <- "https://fapi.binance.com"
endpoint <- "/fapi/v2/account"
servertime <- request(paste0(base, "/fapi/v1/time")) |>
req_perform() |>
resp_body_json()
timestamp <- format(round(as.numeric(servertime$serverTime)), scientific = FALSE, trim = TRUE)
params <- paste0("timestamp=", timestamp)
sig <- hmac(secret_key, params, algo = "sha256")
url <- paste0(base, endpoint, "?", params, "&signature=", sig)
req <- request(url) |>
req_headers("X-MBX-APIKEY" = api_key) |>
req_perform()
timestamp <- as.character(server_time$serverTime)
server_time <- request(paste0(base, "/fapi/v1/time")) |>
req_perform() |>
resp_body_json()
timestamp <- as.character(server_time$serverTime)
qs <- paste0("recvWindow=5000&timestamp=", timestamp)
sig <- digest::hmac(key = secret_key, object = qs, algo = "sha256")
url <- paste0(base, endpoint, "?", qs, "&signature=", sig)
req <- request(url) |>
req_headers("X-MBX-APIKEY" = api_key) |>
req_perform()
resp <- request(url) |>
req_headers("X-MBX-APIKEY" = api_key) |>
req_perform()
library(httr2)
library(digest)
api_key <- Sys.getenv("BINX_API_KEY")
secret_key <- Sys.getenv("BINX_SECRET_KEY")
base <- "https://fapi.binance.com"
endpoint <- "/fapi/v2/account"
# required params
server_time <- request(paste0(base, "/fapi/v1/time")) |>
req_perform() |>
resp_body_json()
timestamp <- as.character(server_time$serverTime)
qs <- paste0("recvWindow=5000&timestamp=", timestamp)
sig <- digest::hmac(key = secret_key, object = qs, algo = "sha256")
url <- paste0(base, endpoint, "?", qs, "&signature=", sig)
resp <- request(url) |>
req_headers("X-MBX-APIKEY" = api_key) |>
req_perform()
out <- resp_body_json(resp)
str(out)
library(httr2)
library(digest)
api_key <- Sys.getenv("BINX_API_KEY")
secret_key <- Sys.getenv("BINX_SECRET_KEY")
base <- "https://fapi.binance.com"
endpoint <- "/fapi/v2/account"
# required params
server_time <- request(paste0(base, "/fapi/v1/time")) |>
req_perform() |>
resp_body_json()
timestamp <- as.character(server_time$serverTime)
qs <- paste0("recvWindow=5000&timestamp=", timestamp)
sig <- digest::hmac(key = secret_key, object = qs, algo = "sha256")
url <- paste0(base, endpoint, "?", qs, "&signature=", sig)
resp <- request(url) |>
req_headers("X-MBX-APIKEY" = api_key) |>
req_perform()
out <- resp_body_json(resp)
str(out)
acc <- out  # from resp_body_json(...)
acc$totalWalletBalance
acc$totalUnrealizedProfit
head(lapply(acc$assets, `[`, c("asset","walletBalance","availableBalance")), 5)
head(lapply(acc$positions, `[`, c("symbol","positionAmt","entryPrice","unRealizedProfit")), 5)
AGENT_ZELINA_PATH <- "~/Documents/2025/_2025-06-17_Zelina"
agent <- suppressMessages(agentr::load_agent(sprintf("%s/data_collector_agent.rds", AGENT_ZELINA_PATH)))
agent$sync_all_data_okx_candle_timely()
agent$get_logs()
agent$sync_all_data_fred_timely()
str(agent$data_collector)
suppressMessages(agentr::save_agent(agent, sprintf("%s/data_collector_agent.rds", AGENT_ZELINA_PATH)))
investdatar::detect_time_gaps_okx_candle
dt <- agent$get_local_data_okx_candle('ETH-USDT-SWAP', '4H')
investdatar::detect_time_gaps_okx_candle(dt)
agent$get_local_data_okx_candle('XRP-USDT-SWAP', '4H')
agent$upload_to_vm_okx_candle(vm_name = 'r-free-vm', vm_zone = 'us-central1-a')
agent$upload_to_vm_okx_candle
investdatar::upload_candle_from_vm
Sys.getenv("FRED_Data_Path")
AGENT_ZELINA_PATH <- "~/Documents/2025/_2025-06-17_Zelina"
agent <- suppressMessages(agentr::load_agent(sprintf("%s/data_collector_agent.rds", AGENT_ZELINA_PATH)))
str(agent$data_collector)
agent$upload_to_vm_fred(vm_name = 'r-free-vm', vm_zone = 'us-central1-a')
AGENT_ZELINA_PATH <- "~/Documents/2025/_2025-06-17_Zelina"
agent <- suppressMessages(agentr::load_agent(sprintf("%s/data_collector_agent.rds", AGENT_ZELINA_PATH)))
AGENT_ZELINA_PATH <- "~/Documents/2025/_2025-06-17_Zelina"
agent <- suppressMessages(agentr::load_agent(sprintf("%s/data_collector_agent.rds", AGENT_ZELINA_PATH)))
agent$upload_to_vm_fred(vm_name = 'r-free-vm', vm_zone = 'us-central1-a')
